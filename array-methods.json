[
  {
    "method": "concat",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
    "sample": "<section class=\"prog__container\"><p>The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p><pre><code>Array.prototype.concat ( [ item1 [ , item2 [ , … ] ] ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['a', 'b', 'c'];\nvar array2 = ['d', 'e', 'f'];\n\nconsole.log(array1.concat(array2));\n// expected output: Array [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n</code>\n</pre>\n"
  },
  {
    "method": "copyWithin()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",
    "sample": "<section class=\"prog__container\"><p>The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.</p><pre><code>arr.copyWithin(target)\narr.copyWithin(target, start)\narr.copyWithin(target, start, end)\n</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['a', 'b', 'c', 'd', 'e'];\n\n// copy to index 0 the element at index 3\nconsole.log(array1.copyWithin(0, 3, 4));\n// expected output: Array [\"d\", \"b\", \"c\", \"d\", \"e\"]\n\n// copy to index 1 all elements from index 3 to the end\nconsole.log(array1.copyWithin(1, 3));\n// expected output: Array [\"d\", \"d\", \"e\", \"d\", \"e\"]\n</code>\n</pre>\n"
  },
  {
    "method": "entries()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",
    "sample": "<section class=\"prog__container\"><p>The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.</p><pre><code>a.entries()</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['a', 'b', 'c'];\n\nvar iterator1 = array1.entries();\n\nconsole.log(iterator1.next().value);\n// expected output: Array [0, \"a\"]\n\nconsole.log(iterator1.next().value);\n// expected output: Array [1, \"b\"]\n</code>\n</pre>\n"
  },
  {
    "method": "every",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",
    "sample": "<section class=\"prog__container\"><p>The every() method tests whether all elements in the array pass the test implemented by the provided function.</p><pre><code>Array.prototype.every ( callbackfn [ , thisArg ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">function isBelowThreshold(currentValue) {\n  return currentValue < 40;\n}\n\nvar array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(isBelowThreshold));\n// expected output: true\n</code>\n</pre>\n"
  },
  {
    "method": "fill()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
    "sample": "<section class=\"prog__container\"><p>The fill() method fills all the elements of an array from a start index to an end index with a static value.</p><pre><code>arr.fill(value)\narr.fill(value, start)\narr.fill(value, start, end)\n</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 2, 3, 4];\n\n// fill with 0 from position 2 until position 4\nconsole.log(array1.fill(0, 2, 4));\n// expected output: [1, 2, 0, 0]\n\n// fill with 5 from position 1\nconsole.log(array1.fill(5, 1));\n// expected output: [1, 5, 5, 5]\n\nconsole.log(array1.fill(6));\n// expected output: [6, 6, 6, 6]\n</code>\n</pre>\n"
  },
  {
    "method": "filter",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
    "sample": "<section class=\"prog__container\"><p>The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p><pre><code>Array.prototype.filter ( callbackfn [ , thisArg ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]\n</code>\n</pre>\n"
  },
  {
    "method": "find()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",
    "sample": "<section class=\"prog__container\"><p>The find() method returns a value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned.</p><pre><code>arr.find(callback[, thisArg])</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [5, 12, 8, 130, 44];\n\nvar found = array1.find(function(element) {\n  return element > 10;\n});\n\nconsole.log(found);\n// expected output: 12\n</code>\n</pre>\n"
  },
  {
    "method": "findIndex()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",
    "sample": "<section class=\"prog__container\"><p>The findIndex() method returns an index of the first element in the array that satisfies the provided testing function. Otherwise -1 is returned.</p><pre><code>arr.findIndex(callback[, thisArg])</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [5, 12, 8, 130, 44];\n\nfunction isLargeNumber(element) {\n  return element > 13;\n}\n\nconsole.log(array1.findIndex(isLargeNumber));\n// expected output: 3\n</code>\n</pre>\n"
  },
  {
    "method": "forEach",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
    "sample": "<section class=\"prog__container\"><p>The forEach() method executes a provided function once per array element.</p><pre><code>Array.prototype.forEach ( callbackfn [ , thisArg ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['a', 'b', 'c'];\n\narray1.forEach(function(element) {\n  console.log(element);\n});\n\n// expected output: \"a\"\n// expected output: \"b\"\n// expected output: \"c\"\n</code>\n</pre>\n"
  },
  {
    "method": "includes()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
    "sample": "<section class=\"prog__container\"><p>The includes() method determines whether an array includes a certain element, returning true or false as appropriate.</p><pre><code>arr.includes(searchElement)\narr.includes(searchElement, fromIndex)\n</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 2, 3];\n\nconsole.log(array1.includes(2));\n// expected output: true\n\nvar pets = ['cat', 'dog', 'bat'];\n\nconsole.log(pets.includes('cat'));\n// expected output: true\n\nconsole.log(pets.includes('at'));\n// expected output: false\n</code>\n</pre>\n"
  },
  {
    "method": "indexOf",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
    "sample": "<section class=\"prog__container\"><p>The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p><pre><code>Array.prototype.indexOf ( searchElement [ , fromIndex ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var beasts = ['ant', 'bison', 'camel', 'duck', 'bison'];\n\nconsole.log(beasts.indexOf('bison'));\n// expected output: 1\n\n// start from index 2\nconsole.log(beasts.indexOf('bison', 2));\n// expected output: 4\n\nconsole.log(beasts.indexOf('giraffe'));\n// expected output: -1\n</code>\n</pre>\n"
  },
  {
    "method": "join",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
    "sample": "<section class=\"prog__container\"><p>The join() method joins all elements of an array into a string.</p><pre><code>Array.prototype.join (separator)</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var elements = ['Fire', 'Air', 'Water'];\n\nconsole.log(elements.join());\n// expected output: \"Fire,Air,Water\"\n\nconsole.log(elements.join(''));\n// expected output: \"FireAirWater\"\n\nconsole.log(elements.join('-'));\n// expected output: \"Fire-Air-Water\"\n</code>\n</pre>\n"
  },
  {
    "method": "keys()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",
    "sample": "<section class=\"prog__container\"><p>The keys() method returns a new Array Iterator that contains the keys for each index in the array.</p><pre><code>arr.keys()</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['a', 'b', 'c'];\nvar iterator = array1.keys(); \n  \nfor (let key of iterator) {\n  console.log(key); // expected output: 0 1 2\n}\n</code>\n</pre>\n"
  },
  {
    "method": "lastIndexOf",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
    "sample": "<section class=\"prog__container\"><p>The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.</p><pre><code>Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var animals = ['Dodo', 'Tiger', 'Penguin', 'Dodo'];\n\nconsole.log(animals.lastIndexOf('Dodo'));\n// expected output: 3\n\nconsole.log(animals.lastIndexOf('Tiger'));\n// expected output: 1\n</code>\n</pre>\n"
  },
  {
    "method": "map",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
    "sample": "<section class=\"prog__container\"><p>The map() method creates a new array with the results of calling a provided function on every element in this array.</p><pre><code>Array.prototype.map ( callbackfn [ , thisArg ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 4, 9, 16];\n\n// pass a function to map\nconst map1 = array1.map(x => x * 2);\n\nconsole.log(map1);\n// expected output: Array [2, 8, 18, 32]\n</code>\n</pre>\n"
  },
  {
    "method": "pop",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",
    "sample": "<section class=\"prog__container\"><p>The pop() method removes the last element from an array and returns that element. This method changes the length of the array.</p><pre><code>Array.prototype.pop ( )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var plants = ['broccoli', 'cauliflower', 'cabbage', 'kale', 'tomato'];\n\nconsole.log(plants.pop());\n// expected output: \"tomato\"\n\nconsole.log(plants);\n// expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\", \"kale\"]\n\nplants.pop();\n\nconsole.log(plants);\n// expected output: Array [\"broccoli\", \"cauliflower\", \"cabbage\"]\n</code>\n</pre>\n"
  },
  {
    "method": "push",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
    "sample": "<section class=\"prog__container\"><p>The push() method adds one or more elements to the end of an array and returns the new length of the array.</p><pre><code>Array.prototype.push ( [ item1 [ , item2 [ , … ] ] ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var animals = ['pigs', 'goats', 'sheep'];\n\nconsole.log(animals.push('cows'));\n// expected output: 4\n\nconsole.log(animals);\n// expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\"]\n\nanimals.push('chickens');\n\nconsole.log(animals);\n// expected output: Array [\"pigs\", \"goats\", \"sheep\", \"cows\", \"chickens\"]\n</code>\n</pre>\n"
  },
  {
    "method": "reduce",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce",
    "sample": "<section class=\"prog__container\"><p>The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.</p><pre><code>Array.prototype.reduce ( callbackfn [ , initialValue ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">const array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue;\n\n// 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer));\n// expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5));\n// expected output: 15\n</code>\n</pre>\n"
  },
  {
    "method": "reduceRight",
    "api-name": "reduce-right",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight",
    "sample": "<section class=\"prog__container\"><p>The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.</p><pre><code>Array.prototype.reduceRight ( callbackfn [ , initialValue ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">const array1 = [[0, 1], [2, 3], [4, 5]].reduceRight(\n  (accumulator, currentValue) => accumulator.concat(currentValue)\n);\n\nconsole.log(array1);\n// expected output: Array [4, 5, 2, 3, 0, 1]\n</code>\n</pre>\n"
  },
  {
    "method": "reverse",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",
    "sample": "<section class=\"prog__container\"><p>The reverse() method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.</p><pre><code>Array.prototype.reverse ( )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = ['one', 'two', 'three'];\nconsole.log('array1: ', array1);\n// expected output: Array ['one', 'two', 'three']\n\nvar reversed = array1.reverse(); \nconsole.log('reversed: ', reversed);\n// expected output: Array ['three', 'two', 'one']\n\n/* Careful: reverse is destructive. It also changes\nthe original array */ \nconsole.log('array1: ', array1);\n// expected output: Array ['three', 'two', 'one']\n</code>\n</pre>\n"
  },
  {
    "method": "shift",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
    "sample": "<section class=\"prog__container\"><p>The shift() method removes the first element from an array and returns that element. This method changes the length of the array.</p><pre><code>Array.prototype.shift ( )</code></pre></section>",
    "example": "<pre>\n<code id='static-js'>var array1 = [1, 2, 3];\n\nvar firstElement = array1.shift();\n\nconsole.log(array1);\n// expected output: Array [2, 3]\n\nconsole.log(firstElement);\n// expected output: 1\n</code>\n</pre>\n"
  },
  {
    "method": "slice",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",
    "sample": "<section class=\"prog__container\"><p>The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included). The original array will not be modified.</p><pre><code>Array.prototype.slice (start, end)</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];\n\nconsole.log(animals.slice(2));\n// expected output: Array [\"camel\", \"duck\", \"elephant\"]\n\nconsole.log(animals.slice(2, 4));\n// expected output: Array [\"camel\", \"duck\"]\n\nconsole.log(animals.slice(1, 5));\n// expected output: Array [\"bison\", \"camel\", \"duck\", \"elephant\"]\n</code>\n</pre>\n"
  },
  {
    "method": "some",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",
    "sample": "<section class=\"prog__container\"><p>The some() method tests whether some element in the array passes the test implemented by the provided function.</p><pre><code>Array.prototype.some ( callbackfn [ , thisArg ] )</code></pre></section>",
    "example": "<pre>\n<code id='static-js'>var array = [1, 2, 3, 4, 5];\n\nvar even = function(element) {\n  // checks whether an element is even\n  return element % 2 === 0;\n};\n\nconsole.log(array.some(even));\n// expected output: true\n</code>\n</pre>\n"
  },
  {
    "method": "sort",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
    "sample": "<section class=\"prog__container\"><p>The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.</p><pre><code>Array.prototype.sort (comparefn)</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var months = ['March', 'Jan', 'Feb', 'Dec'];\nmonths.sort();\nconsole.log(months);\n// expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\nvar array1 = [1, 30, 4, 21, 100000];\narray1.sort();\nconsole.log(array1);\n// expected output: Array [1, 100000, 21, 30, 4]\n</code>\n</pre>\n"
  },
  {
    "method": "splice",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
    "sample": "<section class=\"prog__container\"><p>The splice() method changes the content of an array by removing existing elements and/or adding new elements.</p><pre><code>Array.prototype.splice (start, deleteCount [ , item1 [ , item2 [ , … ] ] ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var months = ['Jan', 'March', 'April', 'June'];\nmonths.splice(1, 0, 'Feb');\n// inserts at 1st index position\nconsole.log(months);\n// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']\n\nmonths.splice(4, 1, 'May');\n// replaces 1 element at 4th index\nconsole.log(months);\n// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']\n</code>\n</pre>\n"
  },
  {
    "method": "toLocaleString",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString",
    "sample": "<section class=\"prog__container\"><p>The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma “,”).</p><pre><code>Array.prototype.toLocaleString ( )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')];\nvar localeString = array1.toLocaleString('en', {timeZone: \"UTC\"});\n\nconsole.log(localeString);\n// expected output: \"1,a,12/21/1997, 2:12:00 PM\",\n// This assumes \"en\" locale and UTC timezone - your results may vary\n</code>\n</pre>\n"
  },
  {
    "method": "toSource()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource",
    "sample": "<section class=\"prog__container\"><p>The toSource() method returns a string representing the source code of the array.</p><pre><code>arr.toSource()</code></pre></section>",
    "example": "<pre><code>var alpha = new Array('a', 'b', 'c');\n\nalpha.toSource();\n//returns ['a', 'b', 'c']</code></pre>"
  },
  {
    "method": "toString",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",
    "sample": "<section class=\"prog__container\"><p>The toString() method returns a string representing the specified array and its elements.</p><pre><code>Array.prototype.toString ( )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 2, 'a', '1a'];\n\nconsole.log(array1.toString());\n// expected output: \"1,2,a,1a\"\n</code>\n</pre>\n"
  },
  {
    "method": "unshift",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",
    "sample": "<section class=\"prog__container\"><p>The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.</p><pre><code>Array.prototype.unshift ( [ item1 [ , item2 [ , … ] ] ] )</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">var array1 = [1, 2, 3];\n\nconsole.log(array1.unshift(4, 5));\n// expected output: 5\n\nconsole.log(array1);\n// expected output: Array [4, 5, 1, 2, 3]\n</code>\n</pre>\n"
  },
  {
    "method": "values()",
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values",
    "sample": "<section class=\"prog__container\"><p>The values() method returns a new Array Iterator object that contains the values for each index in the array.</p><pre><code>arr.values()</code></pre></section>",
    "example": "<pre>\n<code id=\"static-js\">const array1 = ['a', 'b', 'c'];\nconst iterator = array1.values();\n\nfor (const value of iterator) {\n  console.log(value); // expected output: \"a\" \"b\" \"c\"\n}\n</code>\n</pre>\n"
  }
]
